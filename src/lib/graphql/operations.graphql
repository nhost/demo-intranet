# User profile operations
mutation UpdateUserDisplayName($userId: uuid!, $displayName: String!) {
	updateUser(pk_columns: { id: $userId }, _set: { displayName: $displayName }) {
		id
		displayName
		email
		avatarUrl
		updatedAt
	}
}

mutation UpdateUserAvatarUrl($userId: uuid!, $avatarUrl: String!) {
	updateUser(pk_columns: { id: $userId }, _set: { avatarUrl: $avatarUrl }) {
		id
		displayName
		email
		avatarUrl
		updatedAt
	}
}

query GetCurrentUser($userId: uuid!) {
	user(id: $userId) {
		id
		displayName
		email
		avatarUrl
		createdAt
		securityKeys {
			id
			nickname
			credentialId
			transports
			counter
		}
	}
}

query GetUserSecurityKeys($userId: uuid!) {
	authUserSecurityKeys(
		where: { userId: { _eq: $userId } }
		order_by: { nickname: asc }
	) {
		id
		nickname
		credentialId
		transports
		counter
	}
}

mutation DeleteSecurityKey($keyId: uuid!) {
	deleteAuthUserSecurityKey(id: $keyId) {
		id
		nickname
	}
}

# Department operations
query GetUserDepartments {
	departments {
		id
		name
		description
		budget
		created_at
		updated_at
		employees(where: { is_active: { _eq: true } }) {
			id
			role
			joined_at
			user {
				id
				displayName
				email
				avatarUrl
			}
		}
	}
}

query GetDepartmentDetails($departmentId: uuid!) {
	departments_by_pk(id: $departmentId) {
		id
		name
		description
		budget
		created_at
		updated_at
		employees(
			where: { is_active: { _eq: true } }
			order_by: { role: desc, joined_at: asc }
		) {
			id
			role
			joined_at
			user {
				id
				displayName
				email
				avatarUrl
			}
		}
	}
}

mutation UpdateDepartment(
	$departmentId: uuid!
	$name: String
	$description: String
	$budget: numeric
) {
	update_departments_by_pk(
		pk_columns: { id: $departmentId }
		_set: { name: $name, description: $description, budget: $budget }
	) {
		id
		name
		description
		budget
		updated_at
	}
}

# Member management operations
query SearchUsers($searchName: String!, $searchEmail: citext!) {
	users(
		where: {
			_or: [
				{ displayName: { _ilike: $searchName } }
				{ email: { _ilike: $searchEmail } }
			]
		}
		limit: 10
	) {
		id
		displayName
		email
		avatarUrl
	}
}

mutation AddDepartmentMember(
	$userId: uuid!
	$departmentId: uuid!
	$role: department_roles_enum!
) {
	insert_user_departments_one(
		object: {
			user_id: $userId
			department_id: $departmentId
			role: $role
			is_active: true
		}
	) {
		id
		role
		joined_at
		user {
			id
			displayName
			email
			avatarUrl
		}
	}
}

mutation RemoveDepartmentMember($membershipId: uuid!) {
	update_user_departments_by_pk(
		pk_columns: { id: $membershipId }
		_set: { is_active: false }
	) {
		id
		is_active
	}
}

mutation UpdateMemberRole($membershipId: uuid!, $role: department_roles_enum!) {
	update_user_departments_by_pk(
		pk_columns: { id: $membershipId }
		_set: { role: $role }
	) {
		id
		role
		user {
			id
			displayName
			email
			avatarUrl
		}
	}
}

# File operations
query GetAllFiles {
	files(order_by: { createdAt: desc }) {
		id
		name
		size
		mimeType
		createdAt
		uploadedByUserId
	}
}

query GetDepartmentFiles {
	department_files {
		id
		file_id
		department_id
		file {
			id
			name
			size
			mimeType
			createdAt
			uploadedByUserId
		}
		department {
			id
			name
		}
	}
}

query GetUserFiles {
	files(order_by: { createdAt: desc }) {
		id
		name
		size
		mimeType
		createdAt
		uploadedByUserId
	}
}

mutation AddDepartmentFile($fileId: uuid!, $departmentId: uuid!) {
	insert_department_files(
		objects: [{ file_id: $fileId, department_id: $departmentId }]
	) {
		affected_rows
	}
}

mutation RemoveDepartmentFile($fileId: uuid!, $departmentId: uuid!) {
	delete_department_files(
		where: { file_id: { _eq: $fileId }, department_id: { _eq: $departmentId } }
	) {
		affected_rows
	}
}

# Knowledge base operations
query GetKnowledgeBaseEntries {
	kb_entries(order_by: { created_at: desc }) {
		id
		title
		summary
		content
		created_at
		updated_at
		uploader {
			id
			displayName
			email
			avatarUrl
		}
		kb_entry_departments {
			id
			department {
				id
				name
			}
		}
	}
}

query GetKnowledgeBaseEntry($entryId: uuid!) {
	kb_entries_by_pk(id: $entryId) {
		id
		title
		summary
		content
		created_at
		updated_at
		uploader {
			id
			displayName
			email
			avatarUrl
		}
		kb_entry_departments {
			id
			department {
				id
				name
			}
		}
	}
}

query GetDepartmentKnowledgeBase($departmentId: uuid!) {
	kb_entry_departments(
		where: { department_id: { _eq: $departmentId } }
		order_by: { kb_entry: { created_at: desc } }
	) {
		id
		kb_entry {
			id
			title
			summary
			content
			created_at
			updated_at
			uploader {
				id
				displayName
				email
				avatarUrl
			}
		}
	}
}

mutation CreateKnowledgeBaseEntry(
	$title: String!
	$summary: String
	$content: String!
	$departmentId: uuid!
) {
	insert_kb_entries_one(
		object: {
			title: $title
			summary: $summary
			content: $content
			kb_entry_departments: { data: [{ department_id: $departmentId }] }
		}
	) {
		id
		title
		summary
		content
		created_at
		updated_at
		uploader {
			id
			displayName
			email
			avatarUrl
		}
		kb_entry_departments {
			id
			department {
				id
				name
			}
		}
	}
}

mutation CreateKnowledgeBaseEntryWithDepartments(
	$title: String!
	$summary: String
	$content: String!
	$departmentAssociations: [kb_entry_departments_insert_input!]!
) {
	insert_kb_entries_one(
		object: {
			title: $title
			summary: $summary
			content: $content
			kb_entry_departments: { data: $departmentAssociations }
		}
	) {
		id
		title
		summary
		content
		created_at
		updated_at
		uploader {
			id
			displayName
			email
			avatarUrl
		}
		kb_entry_departments {
			id
			department {
				id
				name
			}
		}
	}
}

mutation UpdateKnowledgeBaseEntry(
	$entryId: uuid!
	$title: String
	$summary: String
	$content: String
) {
	update_kb_entries_by_pk(
		pk_columns: { id: $entryId }
		_set: { title: $title, summary: $summary, content: $content }
	) {
		id
		title
		summary
		content
		updated_at
		uploader {
			id
			displayName
			email
			avatarUrl
		}
		kb_entry_departments {
			id
			department {
				id
				name
			}
		}
	}
}

mutation DeleteKnowledgeBaseEntry($entryId: uuid!) {
	delete_kb_entries_by_pk(id: $entryId) {
		id
		title
	}
}

mutation AddKnowledgeBaseToDepartment($entryId: uuid!, $departmentId: uuid!) {
	insert_kb_entry_departments_one(
		object: { kb_entry_id: $entryId, department_id: $departmentId }
	) {
		id
		department {
			id
			name
		}
	}
}

mutation RemoveKnowledgeBaseFromDepartment(
	$entryId: uuid!
	$departmentId: uuid!
) {
	delete_kb_entry_departments(
		where: {
			kb_entry_id: { _eq: $entryId }
			department_id: { _eq: $departmentId }
		}
	) {
		affected_rows
	}
}

# AI Assistant operations
mutation StartAssistantSession($assistantId: String!) {
	graphite {
		startSession(assistantID: $assistantId) {
			sessionID
			assistantID
			userID
			createdAt
		}
	}
}

mutation SendAssistantMessage(
	$sessionId: String!
	$message: String!
	$prevMessageId: String!
) {
	graphite {
		sendMessage(
			sessionID: $sessionId
			message: $message
			prevMessageID: $prevMessageId
		) {
			sessionID
			messages {
				id
				createdAt
				role
				message
			}
		}
	}
}

query GetAssistantSessions {
	graphite {
		sessions {
			sessionID
			assistantID
			userID
			createdAt
		}
	}
}

query GetSessionMessages($sessionId: String!) {
	graphite {
		sessionMessages(sessionID: $sessionId) {
			sessionID
			messages {
				id
				createdAt
				role
				message
			}
		}
	}
}

# Dashboard operations
query GetDashboardSummary {
	# User's departments with member counts
	user_departments: departments {
		id
		name
		description
		budget
		employees_aggregate(where: { is_active: { _eq: true } }) {
			aggregate {
				count
			}
		}
		files_aggregate {
			aggregate {
				count
			}
		}
		kb_entry_departments_aggregate {
			aggregate {
				count
			}
		}
	}

	# Recent knowledge base entries accessible to user
	recent_kb_entries: kb_entries(order_by: { created_at: desc }, limit: 5) {
		id
		title
		summary
		created_at
		uploader {
			id
			displayName
			email
		}
	}
}

query GetUserFilesStats {
	# Files uploaded by current user
	user_files: files(order_by: { createdAt: desc }, limit: 10) {
		id
		name
		size
		mimeType
		createdAt
	}

	# Files uploaded by current user (aggregated)
	user_files_aggregate: filesAggregate {
		aggregate {
			count
			sum {
				size
			}
		}
	}

	# Department files accessible to user
	accessible_department_files: department_files(
		order_by: { file: { createdAt: desc } }
		limit: 10
	) {
		id
		file {
			id
			name
			size
			mimeType
			createdAt
			uploadedByUserId
		}
		department {
			id
			name
		}
	}

	# Recent files accessible to user
	recent_files: files(
		order_by: { createdAt: desc }
		limit: 5
		where: { isUploaded: { _eq: true } }
	) {
		id
		name
		size
		mimeType
		createdAt
		uploadedByUserId
	}
}

query GetUserKnowledgeBaseStats {
	# Knowledge base entries uploaded by current user
	user_kb_entries: kb_entries(order_by: { created_at: desc }, limit: 10) {
		id
		title
		summary
		created_at
		kb_entry_departments {
			department {
				id
				name
			}
		}
	}

	# Knowledge base entries uploaded by current user (aggregated)
	user_kb_entries_aggregate: kb_entries_aggregate {
		aggregate {
			count
		}
	}

	# All knowledge base entries accessible to user
	accessible_kb_entries: kb_entries(order_by: { created_at: desc }, limit: 10) {
		id
		title
		summary
		created_at
		uploader {
			id
			displayName
			email
		}
		kb_entry_departments {
			department {
				id
				name
			}
		}
	}
}
